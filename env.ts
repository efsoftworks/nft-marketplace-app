import zod from "zod"

const envSchema = zod.object({
    NEXT_PUBLIC_INFURA_NODE: zod.string(),
    NEXT_PUBLIC_INFURA_RETRIEVE_FILE: zod.string(),
    NEXT_PUBLIC_INFURA_RETRIEVE_JSON: zod.string(),
    NEXT_PUBLIC_INFURA_UPLOAD_FILE: zod.string(),
    NEXT_PUBLIC_INFURA_UPLOAD_JSON: zod.string(),
    NEXT_PUBLIC_NFT_CONTRACT_ADDRESS: zod.string(),
    NEXT_PUBLIC_PINATA_PIN_HASH: zod.string(),
    NEXT_PUBLIC_PINATA_API_KEY: zod.string(),
    NEXT_PUBLIC_PINATA_SECRET_API_KEY: zod.string(),
    NEXT_PUBLIC_PINATA_JWT: zod.string(),
})

export const env = envSchema.parse({
    NEXT_PUBLIC_INFURA_NODE: process.env.NEXT_PUBLIC_INFURA_NODE,
    NEXT_PUBLIC_INFURA_SECRET: process.env.NEXT_PUBLIC_INFURA_SECRET,
    NEXT_PUBLIC_INFURA_RETRIEVE_FILE: process.env.NEXT_PUBLIC_INFURA_RETRIEVE_FILE,
    NEXT_PUBLIC_INFURA_RETRIEVE_JSON: process.env.NEXT_PUBLIC_INFURA_RETRIEVE_JSON,
    NEXT_PUBLIC_INFURA_UPLOAD_FILE: process.env.NEXT_PUBLIC_INFURA_UPLOAD_FILE,
    NEXT_PUBLIC_INFURA_UPLOAD_JSON: process.env.NEXT_PUBLIC_INFURA_UPLOAD_JSON,
    NEXT_PUBLIC_NFT_CONTRACT_ADDRESS: process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS,
    NEXT_PUBLIC_PINATA_PIN_HASH: process.env.NEXT_PUBLIC_PINATA_PIN_HASH,
    NEXT_PUBLIC_PINATA_API_KEY: process.env.NEXT_PUBLIC_PINATA_API_KEY,
    EXT_PUBLIC_PINATA_SECRET_API_KEY: process.env.NEXT_PUBLIC_PINATA_SECRET_API_KEY,
    NEXT_PUBLIC_PINATA_JWT:  process.env.NEXT_PUBLIC_PINATA_JWT,
})